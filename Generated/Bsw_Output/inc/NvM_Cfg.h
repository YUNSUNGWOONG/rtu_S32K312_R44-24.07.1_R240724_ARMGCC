/*******************************************************************************
**  (C) 2021 HYUNDAI AUTOEVER Corp.                                           **
**  Confidential Proprietary Information. Distribution Limited.               **
**  This source code is permitted to be used only in projects contracted      **
**  with Hyundai Autoever, and any other use is prohibited.                   **
**  If you use it for other purposes or change the source code,               **
**  you may take legal responsibility.                                        **
**  In this case, There is no warranty and technical support.                 **
**                                                                            **
**  FILE-NAME: NvM_Cfg.h                                                      **
**                                                                            **
**  MODULE-NAME: AUTOSAR NvM Module                                           **
**                                                                            **
**  NOTE: This file is auto generated, do not edit this file manually.        **
**                                                                            **
********************************************************************************

********************************************************************************
**                      Generation Tool Information                           **
********************************************************************************
**  Framework version: 1.1.5                                                 **
**                                                                            **
**  Module version: 1.3.2.0                                                   **
**                                                                            **
**  Tool version:                                                        **
**                                                                            **
**  Change History: Refer log file (use -l option to generate log file)       **
**                                                                            **
********************************************************************************
**                      File Generation Information                           **
*******************************************************************************/
/*
* INPUT FILE:      Configuration\Definition\ECUConfigurationParameters.arxml
*                  Configuration\Definition\Fls_s32k312_mqfp172.epd
*                  Configuration\Definition\Os_ECU_Configuration_PDF_S32K312.arxml
*                  Configuration\Ecu\Ecud_Dem.arxml             
*                  Configuration\Ecu\Ecud_NvM.arxml             
*                  Configuration\Ecu\Ecud_Os.arxml              
*                  Configuration\Ecu\Mcal\Ecud_Fee.arxml        
*                  Configuration\Ecu\Mcal\Ecud_Fls.arxml        
*                  Generated\Bsw_Output\bswmd\Bswmd_NvM.arxml   
*                  Static_Code\Modules\b_mcal_nxp_S32K3xx\b_mcal_Fee_nxp_S32K3xx\autosar\Fee.epd
*                  Static_Code\Modules\Dem_R44\generator\Dem_ECU_Configuration_PDF.arxml
*                  Static_Code\Modules\NvM_R44\generator\NvM_ECU_Configuration_PDF.arxml
* GENERATED ON: The time-stamp is removed
*/

#ifndef NVM_CFG_H
#define NVM_CFG_H 

/*******************************************************************************
**                      Include Section                                       **
*******************************************************************************/
#include "Std_Types.h"
#include "Rte_NvM_Type.h"


/*******************************************************************************
**                      Common Published Information                          **
*******************************************************************************/
#define NVM_API_CONFIG_CLASS_1        0
#define NVM_API_CONFIG_CLASS_2        1
#define NVM_API_CONFIG_CLASS_3        2

typedef enum
{
  NVM_READ_ALL = 0x00,
  NVM_WRITE_ALL,
  NVM_VALIDATE_ALL,
  NVM_FIRST_INIT_ALL,
  NVM_CANCEL_WRITE_ALL
} NvM_MultiBlockRequestType;

typedef struct{
  uint8 Ldump;
} NvM_ConfigType;
/*******************************************************************************
**                      Version Information                                   **
*******************************************************************************/
#define    NVM_AR_RELEASE_MAJOR_VERSION                  0x04u
#define    NVM_AR_RELEASE_MINOR_VERSION                  0x04u
#define    NVM_AR_RELEASE_REVISION_VERSION               0x00u
#define    NVM_SW_MAJOR_VERSION                          0x01u
#define    NVM_SW_MINOR_VERSION                          0x03u
#define    NVM_SW_PATCH_VERSION                          0x02u
#define    NVM_VENDOR_ID                                 0x004Cu
#define    NVM_MODULE_ID                                 0x0014u

/*******************************************************************************
**                      Global Data Types                                     **
*******************************************************************************/

/* 
 * Informs whether to initimate BswM about the current status of Multiblock
 * job. If it is STD_ON, then the multiblock status should be informed to BswM
 */
#define NVM_BSWM_MULTI_BLOCK_JOB_STATUS_INFORMATION        STD_ON

/* Enables/Disables Development error detection */
#define NVM_DEV_ERROR_DETECT                               STD_ON

/* Enables or Disables Dynamic configuration during ReadAll */
#define NVM_DYNAMIC_CONFIGURATION                          STD_OFF

/* Enables or Disables the Fast Mode during ReadAll/WriteAll */
#define NVM_DRV_MODE_SWITCH                                STD_ON

/* Enables or Disables Prioritization for Blocks */
#define NVM_JOB_PRIORITIZATION                             STD_ON

/* Enables/Disables Lower layer Callback notification */
#define NVM_POLLING_MODE                                   STD_OFF

/* Enables or Disables inclusion of SetRamBlockStatus API */
#define NVM_SET_RAM_BLOCK_STATUS_API                       STD_ON

/* Enables or Disables GetVersionInfo API */
#define NVM_VERSION_INFO_API                               STD_ON

/* 
 * Enables/Disables CRC Support, If parameter NvMBlockUseCrc is configured
 * for any one of the block then CRC Support should be STD_ON
 */
#define NVM_CRC_SUPPORT                                    STD_ON

/* Enable if any one Block using CRC compare mechanism */
#define NVM_BLOCK_USE_CRC_COMP_MECHANISM                   STD_OFF

/* 
 * Enables/Disables explicit synchronization mechanism If any one block
 * NvMBlockUseSyncMechanism is configured as TRUE then synchronization
 * mechanism should be STD_ON
 */
#define NVM_BLOCK_USE_SYNC_MECHANISM                       STD_OFF

/* 
 * Enables/Disables Write Verification If any one block
 * NvMWriteVerification is configured as TRUE then Write Verification should be
 * STD_ON
 */
#define NVM_WRITE_VERIFICATION                             STD_ON

/* 
 * If any one block NvMStaticBlockIDCheck is configured then it should be
 * STD_ON
 */
#define NVM_STATIC_ID_CHECK                                STD_OFF

/* Enables/Disables NvMMultiBlockCallback */
#define NVM_MULTIBLKCBK_ENABLE                             STD_OFF

/* 
 * Enables/Disables SignleBlockCallback If any one block
 * NvMSingleBlockCallback is configured then Single block Callback should be ON
 */
#define NVM_SINGLE_BLOCK_CALLBACK                          STD_OFF

/* 
 * If any one block NvMRamBlockDataAddress is configured then RAM Block
 * Data Address should be STD_ON
 */
#define NVM_RAM_BLOCK_DATA_ADDRESS                         STD_ON

/* 
 * Enables/Disables InitBlockCallback, If any one block NvMInitBlockCallback
 * is configured then Init Callback should be STD_ON
 */
#define NVM_INIT_CALLBACK                                  STD_OFF

/* Defines ReadAllOrder Container is present or not */
#define NVM_READALL_ORDER_SUPPORT                          STD_OFF

/* Defines WriteAllOrder Container is present or not */
#define NVM_WRITEALL_ORDER_SUPPORT                         STD_OFF

/* Macro for knowing CRC Type configured */
#define NVM_CRC8_SUPPORT                                   STD_OFF

/* Macro for knowing CRC Type configured */
#define NVM_CRC16_SUPPORT                                  STD_ON

/* Macro for knowing CRC Type configured */
#define NVM_CRC32_SUPPORT                                  STD_OFF

/* Enable if NVM_JOB_PRIORITIZATION is STD_ON */
#define NVM_IMM_JOB_PRIORITY                               STD_OFF

/* Defines PM is enable or not */
#define NVM_PM_ENABLE                                      STD_OFF

/* Defines Dem Container is present or not */
#define NVM_DEMERROR_REPORT                                STD_ON


/* Macro for knowing size of CRC and SID configured */
#define NVM_CRC_SID_SIZE                                   ((uint16)2)

/* Defines the set of functionality required by NvM */
#define NVM_API_CONFIG_CLASS                               (NVM_API_CONFIG_CLASS_3)

/* Mainfunction period */
#define NVM_MAIN_FUNCTION_PERIOD                           ((double)0.005)

/* 
 * Defines the number of least significant bits which shall be used to
 * address a certain dataset of a NVRAM block within the interface to the
 * memory hardware abstraction
 */
#define NVM_DATASET_SELECTION_BITS                         ((uint8)2)

/* 
 * Defines the number of retries to let the application copy data to or
 * from the NvM modules mirror before postponing the current job
 */
#define NVM_REPEAT_MIRROR_OPERATIONS                       ((uint8)3)

/* Defines compiled configuration Id */
#define NVM_COMPILED_CONFIG_ID                             ((uint16)59)

/* 
 * Should be generated if NVM_JOB_PRIORITIZATION is STD_ON and
 * NVM_IMM_JOB_PRIORITY is STD_ON.Defines the number of queue entries for the
 * immediate priority write queue
 */
#define NVM_SIZE_IMMEDIATE_JOB_QUEUE                       ((uint16)20)

/* 
 * Should be generated if NVM_JOB_PRIORITIZATION is STD_ON and
 * NVM_IMM_JOB_PRIORITY is STD_ON.Defines the number of queue entries for the
 * immediate priority write queue
 */
#define NVM_SIZE_STANDARD_JOB_QUEUE                        ((uint16)20)

/* Defines number of CRC bytes processed in one scan cycle */
#define NVM_CRC_NUM_OF_BYTES                               ((uint16)16)

/* Macro for Max NvMNvBlockLength configured */
#define NVM_MIRROR_BUFFER                                  ((uint16)212)

/* Defines Maximum data length for NvMWriteVerificationDataSize */
#define NVM_MAX_WRITE_VER_BLK_LENGTH                       ((uint16)212)

/* Defines number of blocks with dataset management that are configured */
#define NVM_DATASET_INDEX                                  ((uint16)0)

/* Total number of blocks configured for ReadAll */
#define NVM_TOTAL_NUM_OF_READALL_BLOCKS                    (12U)

/* Total number of blocks configured for WriteAll */
#define NVM_TOTAL_NUM_OF_WRITEALL_BLOCKS                   (12U)

/* Total number of blocks not configured for ReadAll */
#define NVM_BLOCKS_NOT_CONFIG_READALL                      (4U)

/* Total number of blocks not configured for WriteAll */
#define NVM_BLOCKS_NOT_CONFIG_WRITEALL                     (4U)

/* Total number of blocks configured for FirstInitAll */
#define NVM_TOTAL_NUM_OF_FIRSTINITALL_BLOCKS               (0U)

/* Total number of blocks configured for ValidateAll */
#define NVM_TOTAL_NUM_OF_VALIDATEALL_BLOCKS                (0U)

/* Total number of NVRAM blocks configured to use CRC compare mechanism */
#define NVM_COMPARE_NUM_NVRAM_BLOCK                        ((uint16)0)
/* Total number of NVRAM blocks */
#define NVM_TOTAL_NUM_OF_NVRAM_BLOCKS                      ((NvM_BlockIdType)17)
/* 
 * Notify NVM_BLOCK_DATASET is configured or is not configured
 * Within API configuration class 1, the block management type
 * NVM_BLOCK_DATASET is not supported 
 */
#define NVM_DATASET_PRESENT                                STD_ON

/* Total number of NV blocks configured to use CRC compare mechanism */
#define NVM_COMPARE_NUM_NV_BLOCK                           ((uint16)0)
/* Macro for knowing whether fast WriteAll function for Dem is supported */
#define NVM_BSWM_DEM_WRITENVDATA_CALL                      STD_OFF
/* Os Alarm for trigger Memory Mainfunction */
#define NVM_OS_ALARM                                       (OsAlarm_BSW_Mem_Process)
/* Tick value for trigger Memory Mainfunction */
#define NVM_TICKS_BURST_MODE                               (1)
/* Tick value for trigger Memory Mainfunction */
#define NVM_TICKS_NORMAL_MODE                              (4)
/* Defines the user callback configured by NvMUserJobFunction */
#define NVM_USER_JOB_FUNCTION                              (Mem_76_Pfls_MainFunction)

/*******************************************************************************
**                      Configuration Set Handles                             **
*******************************************************************************/
#define NvMBlock_ConfigID ((NvM_BlockIdType)1)
#define NvMBlock_DemNonVolatileData ((NvM_BlockIdType)2)
#define NvMBlock_DemEventStatusNvRamBlock ((NvM_BlockIdType)3)
#define NvMBlock_DemPrimaryEventMemoryEntry_0 ((NvM_BlockIdType)4)
#define NvMBlock_DemPrimaryEventMemoryEntry_1 ((NvM_BlockIdType)5)
#define NvMBlock_DemPrimaryEventMemoryEntry_2 ((NvM_BlockIdType)6)
#define NvMBlock_Test_Native_6 ((NvM_BlockIdType)7)
#define NvMBlock_DemUserDefinedEventMemoryEntry_0 ((NvM_BlockIdType)8)
#define NvMBlock_DemUserDefinedEventMemoryEntry_1 ((NvM_BlockIdType)9)
#define NvMBlock_DemUserDefinedEventMemoryEntry_2 ((NvM_BlockIdType)10)
#define NvMBlock_DemMirrorEventMemory_0 ((NvM_BlockIdType)11)
#define NvMBlock_DemMirrorEventMemory_1 ((NvM_BlockIdType)12)
#define NvMBlock_DemMirrorEventMemory_2 ((NvM_BlockIdType)13)
#define NvMBlock_DemPermanentEventMemory_0 ((NvM_BlockIdType)14)
#define NvMBlock_DemPermanentEventMemory_1 ((NvM_BlockIdType)15)
#define NvMBlock_DemPermanentEventMemory_2 ((NvM_BlockIdType)16)

/*******************************************************************************
**                      Function Prototypes                                   **
*******************************************************************************/
#define NVM_START_SEC_CONST_16
#include "MemMap.h"
extern CONST(uint16, NVM_CONST) NvM_ReadAllBlocks[];

extern CONST(uint16, NVM_CONST) NvM_WriteAllBlocks[];

extern CONST(uint16, NVM_CONST) NvM_NotReadAll[];

extern CONST(uint16, NVM_CONST) NvM_NotWriteAll[];

extern CONST(uint16, NVM_CONST) NvM_ValidateAllBlocks[];

extern CONST(uint16, NVM_CONST) NvM_FirstInitAllBlocks[];
#define NVM_STOP_SEC_CONST_16
#include "MemMap.h"
#endif /* NVM_CFG_H */

/*******************************************************************************
**                      End of File                                           **
*******************************************************************************/
